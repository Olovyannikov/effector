// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`hmr babel effector code at corrent called fabric (callback in invoke) 1`] = `
"'use strict'

var _effector = require('effector')

var _factories = require('@withease/factories')

let model

const _internalHMRRegion = (0, _effector.createNode)()

;(0, _effector.withRegion)(_internalHMRRegion, () => {
  model = (0, _effector.withFactory)({
    sid: '-qbyui2',
    fn: () => (0, _factories.invoke)(() => correct()),
  })
})
const correct = (0, _effector.withFactory)({
  sid: '-gflem9',
  fn: () =>
    (0, _factories.createFactory)(() => {
      const $count = (0, _effector.createStore)(0, {
        sid: '-y2tkea',
      })
      const increment = (0, _effector.createEvent)({
        sid: 'a5bvgp',
      })
      const decrement = (0, _effector.createEvent)({
        sid: '-kqbygk',
      })
      ;(0, _effector.sample)({
        and: [
          {
            clock: increment,
            source: $count,
            fn: count => count + 1,
            target: $count,
          },
        ],
        or: {
          sid: '-aqjp65',
        },
      })
      ;(0, _effector.sample)({
        and: [
          {
            clock: decrement,
            source: $count,
            fn: count => count - 1,
            target: $count,
          },
        ],
        or: {
          sid: 'inxtwp',
        },
      })
    }),
})

let _internalHmrApi =
  typeof module !== 'undefined'
    ? module.hot
    : eval('import.meta.hot ?? import.meta.webpackHot')

if (_internalHmrApi) {
  _internalHmrApi.dispose(() => (0, _effector.clearNode)(_internalHMRRegion))
} else {
  console.warning('[effector hmr] HMR is not available in current environment.')
}
"
`;

exports[`hmr babel effector code at corrent called fabric 1`] = `
"'use strict'

var _effector = require('effector')

var _factories = require('@withease/factories')

let model

const _internalHMRRegion = (0, _effector.createNode)()

;(0, _effector.withRegion)(_internalHMRRegion, () => {
  model = (0, _effector.withFactory)({
    sid: '-qbyui2',
    fn: () => (0, _factories.invoke)(correct),
  })
})
const correct = (0, _effector.withFactory)({
  sid: '-gflem9',
  fn: () =>
    (0, _factories.createFactory)(() => {
      const $count = (0, _effector.createStore)(0, {
        sid: '-y2tkea',
      })
      const increment = (0, _effector.createEvent)({
        sid: 'a5bvgp',
      })
      const decrement = (0, _effector.createEvent)({
        sid: '-kqbygk',
      })
      ;(0, _effector.sample)({
        and: [
          {
            clock: increment,
            source: $count,
            fn: count => count + 1,
            target: $count,
          },
        ],
        or: {
          sid: '-aqjp65',
        },
      })
      ;(0, _effector.sample)({
        and: [
          {
            clock: decrement,
            source: $count,
            fn: count => count - 1,
            target: $count,
          },
        ],
        or: {
          sid: 'inxtwp',
        },
      })
    }),
})

let _internalHmrApi =
  typeof module !== 'undefined'
    ? module.hot
    : eval('import.meta.hot ?? import.meta.webpackHot')

if (_internalHmrApi) {
  _internalHmrApi.dispose(() => (0, _effector.clearNode)(_internalHMRRegion))
} else {
  console.warning('[effector hmr] HMR is not available in current environment.')
}
"
`;

exports[`hmr babel effector code at root & correct called fabric in same file (callback in invoke) 1`] = `
"'use strict'

var _effector = require('effector')

var _factories = require('@withease/factories')

let $rcount
let rincrement
let rdecrement
let model

const _internalHMRRegion = (0, _effector.createNode)()

;(0, _effector.withRegion)(_internalHMRRegion, () => {
  $rcount = (0, _effector.createStore)(0, {
    sid: '-4nvlii',
  })
  rincrement = (0, _effector.createEvent)({
    sid: '-2vfjaq',
  })
  rdecrement = (0, _effector.createEvent)({
    sid: '-xr3d7z',
  })
  ;(0, _effector.sample)({
    and: [
      {
        clock: rincrement,
        source: $rcount,
        fn: count => count + 1,
        target: $rcount,
      },
    ],
    or: {
      sid: '-ar3ht8',
    },
  })
  ;(0, _effector.sample)({
    and: [
      {
        clock: rdecrement,
        source: $rcount,
        fn: count => count - 1,
        target: $rcount,
      },
    ],
    or: {
      sid: 'ine19m',
    },
  })
  model = (0, _effector.withFactory)({
    sid: '22qh5m',
    fn: () => (0, _factories.invoke)(() => correct()),
  })
})
const correct = (0, _effector.withFactory)({
  sid: 'wh8kc5',
  fn: () =>
    (0, _factories.createFactory)(() => {
      const $count = (0, _effector.createStore)(0, {
        sid: '-vicpim',
      })
      const increment = (0, _effector.createEvent)({
        sid: '-oa68ff',
      })
      const decrement = (0, _effector.createEvent)({
        sid: '-1bgw8g',
      })
      ;(0, _effector.sample)({
        and: [
          {
            clock: increment,
            source: $count,
            fn: count => count + 1,
            target: $count,
          },
        ],
        or: {
          sid: 'j5j8w9',
        },
      })
      ;(0, _effector.sample)({
        and: [
          {
            clock: decrement,
            source: $count,
            fn: count => count - 1,
            target: $count,
          },
        ],
        or: {
          sid: 'jkxhid',
        },
      })
    }),
})

let _internalHmrApi =
  typeof module !== 'undefined'
    ? module.hot
    : eval('import.meta.hot ?? import.meta.webpackHot')

if (_internalHmrApi) {
  _internalHmrApi.dispose(() => (0, _effector.clearNode)(_internalHMRRegion))
} else {
  console.warning('[effector hmr] HMR is not available in current environment.')
}
"
`;

exports[`hmr babel effector code at root & correct called fabric in same file 1`] = `
"'use strict'

var _effector = require('effector')

var _factories = require('@withease/factories')

let $rcount
let rincrement
let rdecrement
let model

const _internalHMRRegion = (0, _effector.createNode)()

;(0, _effector.withRegion)(_internalHMRRegion, () => {
  $rcount = (0, _effector.createStore)(0, {
    sid: '-4nvlii',
  })
  rincrement = (0, _effector.createEvent)({
    sid: '-2vfjaq',
  })
  rdecrement = (0, _effector.createEvent)({
    sid: '-xr3d7z',
  })
  ;(0, _effector.sample)({
    and: [
      {
        clock: rincrement,
        source: $rcount,
        fn: count => count + 1,
        target: $rcount,
      },
    ],
    or: {
      sid: '-ar3ht8',
    },
  })
  ;(0, _effector.sample)({
    and: [
      {
        clock: rdecrement,
        source: $rcount,
        fn: count => count - 1,
        target: $rcount,
      },
    ],
    or: {
      sid: 'ine19m',
    },
  })
  model = (0, _effector.withFactory)({
    sid: '22qh5m',
    fn: () => (0, _factories.invoke)(correct),
  })
})
const correct = (0, _effector.withFactory)({
  sid: 'wh8kc5',
  fn: () =>
    (0, _factories.createFactory)(() => {
      const $count = (0, _effector.createStore)(0, {
        sid: '-vicpim',
      })
      const increment = (0, _effector.createEvent)({
        sid: '-oa68ff',
      })
      const decrement = (0, _effector.createEvent)({
        sid: '-1bgw8g',
      })
      ;(0, _effector.sample)({
        and: [
          {
            clock: increment,
            source: $count,
            fn: count => count + 1,
            target: $count,
          },
        ],
        or: {
          sid: 'j5j8w9',
        },
      })
      ;(0, _effector.sample)({
        and: [
          {
            clock: decrement,
            source: $count,
            fn: count => count - 1,
            target: $count,
          },
        ],
        or: {
          sid: 'jkxhid',
        },
      })
    }),
})

let _internalHmrApi =
  typeof module !== 'undefined'
    ? module.hot
    : eval('import.meta.hot ?? import.meta.webpackHot')

if (_internalHmrApi) {
  _internalHmrApi.dispose(() => (0, _effector.clearNode)(_internalHMRRegion))
} else {
  console.warning('[effector hmr] HMR is not available in current environment.')
}
"
`;

exports[`hmr babel effector code at root & correct uncalled fabric in same file 1`] = `
"'use strict'

var _effector = require('effector')

var _factories = require('@withease/factories')

let $rcount
let rincrement
let rdecrement

const _internalHMRRegion = (0, _effector.createNode)()

;(0, _effector.withRegion)(_internalHMRRegion, () => {
  $rcount = (0, _effector.createStore)(0, {
    sid: '-4nvlii',
  })
  rincrement = (0, _effector.createEvent)({
    sid: '-2vfjaq',
  })
  rdecrement = (0, _effector.createEvent)({
    sid: '-xr3d7z',
  })
  ;(0, _effector.sample)({
    and: [
      {
        clock: rincrement,
        source: $rcount,
        fn: count => count + 1,
        target: $rcount,
      },
    ],
    or: {
      sid: '-ar3ht8',
    },
  })
  ;(0, _effector.sample)({
    and: [
      {
        clock: rdecrement,
        source: $rcount,
        fn: count => count - 1,
        target: $rcount,
      },
    ],
    or: {
      sid: 'ine19m',
    },
  })
})
const correct = (0, _effector.withFactory)({
  sid: 'wh8kc5',
  fn: () =>
    (0, _factories.createFactory)(() => {
      const $count = (0, _effector.createStore)(0, {
        sid: '-vicpim',
      })
      const increment = (0, _effector.createEvent)({
        sid: '-oa68ff',
      })
      const decrement = (0, _effector.createEvent)({
        sid: '-1bgw8g',
      })
      ;(0, _effector.sample)({
        and: [
          {
            clock: increment,
            source: $count,
            fn: count => count + 1,
            target: $count,
          },
        ],
        or: {
          sid: 'j5j8w9',
        },
      })
      ;(0, _effector.sample)({
        and: [
          {
            clock: decrement,
            source: $count,
            fn: count => count - 1,
            target: $count,
          },
        ],
        or: {
          sid: 'jkxhid',
        },
      })
    }),
})

let _internalHmrApi =
  typeof module !== 'undefined'
    ? module.hot
    : eval('import.meta.hot ?? import.meta.webpackHot')

if (_internalHmrApi) {
  _internalHmrApi.dispose(() => (0, _effector.clearNode)(_internalHMRRegion))
} else {
  console.warning('[effector hmr] HMR is not available in current environment.')
}
"
`;

exports[`hmr babel effector code at root & incorrect called fabric in same file 1`] = `
"'use strict'

var _effector = require('effector')

let $rcount
let rincrement
let rdecrement

const _internalHMRRegion = (0, _effector.createNode)()

;(0, _effector.withRegion)(_internalHMRRegion, () => {
  $rcount = (0, _effector.createStore)(0, {
    sid: '-54x7wp',
  })
  rincrement = (0, _effector.createEvent)({
    sid: '-3ch5ox',
  })
  rdecrement = (0, _effector.createEvent)({
    sid: '-y84zm6',
  })
  ;(0, _effector.sample)({
    and: [
      {
        clock: rincrement,
        source: $rcount,
        fn: count => count + 1,
        target: $rcount,
      },
    ],
    or: {
      sid: '-arnael',
    },
  })
  ;(0, _effector.sample)({
    and: [
      {
        clock: rdecrement,
        source: $rcount,
        fn: count => count - 1,
        target: $rcount,
      },
    ],
    or: {
      sid: 'imu8o9',
    },
  })
})

function incorrect() {
  const $count = (0, _effector.createStore)(0, {
    sid: '-vzebwt',
  })
  const increment = (0, _effector.createEvent)({
    sid: '-or7utm',
  })
  const decrement = (0, _effector.createEvent)({
    sid: '-1siimn',
  })
  ;(0, _effector.sample)({
    and: [
      {
        clock: increment,
        source: $count,
        fn: count => count + 1,
        target: $count,
      },
    ],
    or: {
      sid: 'j4zgaw',
    },
  })
  ;(0, _effector.sample)({
    and: [
      {
        clock: decrement,
        source: $count,
        fn: count => count - 1,
        target: $count,
      },
    ],
    or: {
      sid: 'jkdox0',
    },
  })
}

const model = incorrect()

let _internalHmrApi =
  typeof module !== 'undefined'
    ? module.hot
    : eval('import.meta.hot ?? import.meta.webpackHot')

if (_internalHmrApi) {
  _internalHmrApi.dispose(() => (0, _effector.clearNode)(_internalHMRRegion))
} else {
  console.warning('[effector hmr] HMR is not available in current environment.')
}
"
`;

exports[`hmr babel effector code at root & incorrect uncalled fabric in same file 1`] = `
"'use strict'

var _effector = require('effector')

let $rcount
let rincrement
let rdecrement

const _internalHMRRegion = (0, _effector.createNode)()

;(0, _effector.withRegion)(_internalHMRRegion, () => {
  $rcount = (0, _effector.createStore)(0, {
    sid: '-54x7wp',
  })
  rincrement = (0, _effector.createEvent)({
    sid: '-3ch5ox',
  })
  rdecrement = (0, _effector.createEvent)({
    sid: '-y84zm6',
  })
  ;(0, _effector.sample)({
    and: [
      {
        clock: rincrement,
        source: $rcount,
        fn: count => count + 1,
        target: $rcount,
      },
    ],
    or: {
      sid: '-arnael',
    },
  })
  ;(0, _effector.sample)({
    and: [
      {
        clock: rdecrement,
        source: $rcount,
        fn: count => count - 1,
        target: $rcount,
      },
    ],
    or: {
      sid: 'imu8o9',
    },
  })
})

function incorrect() {
  const $count = (0, _effector.createStore)(0, {
    sid: '-vzebwt',
  })
  const increment = (0, _effector.createEvent)({
    sid: '-or7utm',
  })
  const decrement = (0, _effector.createEvent)({
    sid: '-1siimn',
  })
  ;(0, _effector.sample)({
    and: [
      {
        clock: increment,
        source: $count,
        fn: count => count + 1,
        target: $count,
      },
    ],
    or: {
      sid: 'j4zgaw',
    },
  })
  ;(0, _effector.sample)({
    and: [
      {
        clock: decrement,
        source: $count,
        fn: count => count - 1,
        target: $count,
      },
    ],
    or: {
      sid: 'jkdox0',
    },
  })
}

let _internalHmrApi =
  typeof module !== 'undefined'
    ? module.hot
    : eval('import.meta.hot ?? import.meta.webpackHot')

if (_internalHmrApi) {
  _internalHmrApi.dispose(() => (0, _effector.clearNode)(_internalHMRRegion))
} else {
  console.warning('[effector hmr] HMR is not available in current environment.')
}
"
`;

exports[`hmr babel effector code at root & sample variable 1`] = `
"'use strict'

var _effector = require('effector')

let $count
let increment
let decrement
let $store

const _internalHMRRegion = (0, _effector.createNode)()

;(0, _effector.withRegion)(_internalHMRRegion, () => {
  $count = (0, _effector.createStore)(0, {
    sid: '-z0wt8e',
  })
  increment = (0, _effector.createEvent)({
    sid: '978m4i',
  })
  decrement = (0, _effector.createEvent)({
    sid: '-lof7sr',
  })
  ;(0, _effector.sample)({
    and: [
      {
        clock: increment,
        source: $count,
        fn: count => count + 1,
        target: $count,
      },
    ],
    or: {
      sid: '-arnael',
    },
  })
  ;(0, _effector.sample)({
    and: [
      {
        clock: decrement,
        source: $count,
        fn: count => count - 1,
        target: $count,
      },
    ],
    or: {
      sid: 'imu8o9',
    },
  })
  $store = (0, _effector.sample)({
    and: [
      {
        clock: $count,
      },
    ],
    or: {
      sid: 'wxkf5w',
    },
  })
})

let _internalHmrApi =
  typeof module !== 'undefined'
    ? module.hot
    : eval('import.meta.hot ?? import.meta.webpackHot')

if (_internalHmrApi) {
  _internalHmrApi.dispose(() => (0, _effector.clearNode)(_internalHMRRegion))
} else {
  console.warning('[effector hmr] HMR is not available in current environment.')
}
"
`;

exports[`hmr babel effector code at root 1`] = `
"'use strict'

var _effector = require('effector')

let $count
let increment
let decrement

const _internalHMRRegion = (0, _effector.createNode)()

;(0, _effector.withRegion)(_internalHMRRegion, () => {
  $count = (0, _effector.createStore)(0, {
    sid: '-z0wt8e',
  })
  increment = (0, _effector.createEvent)({
    sid: '978m4i',
  })
  decrement = (0, _effector.createEvent)({
    sid: '-lof7sr',
  })
  ;(0, _effector.sample)({
    and: [
      {
        clock: increment,
        source: $count,
        fn: count => count + 1,
        target: $count,
      },
    ],
    or: {
      sid: '-arnael',
    },
  })
  ;(0, _effector.sample)({
    and: [
      {
        clock: decrement,
        source: $count,
        fn: count => count - 1,
        target: $count,
      },
    ],
    or: {
      sid: 'imu8o9',
    },
  })
})

let _internalHmrApi =
  typeof module !== 'undefined'
    ? module.hot
    : eval('import.meta.hot ?? import.meta.webpackHot')

if (_internalHmrApi) {
  _internalHmrApi.dispose(() => (0, _effector.clearNode)(_internalHMRRegion))
} else {
  console.warning('[effector hmr] HMR is not available in current environment.')
}
"
`;

exports[`hmr babel effector code in correct uncalled fabric 1`] = `
"'use strict'

var _effector = require('effector')

var _factories = require('@withease/factories')

const correct = (0, _effector.withFactory)({
  sid: '-gflem9',
  fn: () =>
    (0, _factories.createFactory)(() => {
      const $count = (0, _effector.createStore)(0, {
        sid: '-y2tkea',
      })
      const increment = (0, _effector.createEvent)({
        sid: 'a5bvgp',
      })
      const decrement = (0, _effector.createEvent)({
        sid: '-kqbygk',
      })
      ;(0, _effector.sample)({
        and: [
          {
            clock: increment,
            source: $count,
            fn: count => count + 1,
            target: $count,
          },
        ],
        or: {
          sid: '-aqjp65',
        },
      })
      ;(0, _effector.sample)({
        and: [
          {
            clock: decrement,
            source: $count,
            fn: count => count - 1,
            target: $count,
          },
        ],
        or: {
          sid: 'inxtwp',
        },
      })
    }),
})
"
`;

exports[`hmr babel effector code in incorrect called fabric 1`] = `
"'use strict'

var _effector = require('effector')

function incorrect() {
  const $count = (0, _effector.createStore)(0, {
    sid: '-yjv6sh',
  })
  const increment = (0, _effector.createEvent)({
    sid: '9oa92i',
  })
  const decrement = (0, _effector.createEvent)({
    sid: '-l7dkur',
  })
  ;(0, _effector.sample)({
    and: [
      {
        clock: increment,
        source: $count,
        fn: count => count + 1,
        target: $count,
      },
    ],
    or: {
      sid: '-ar3hri',
    },
  })
  ;(0, _effector.sample)({
    and: [
      {
        clock: decrement,
        source: $count,
        fn: count => count - 1,
        target: $count,
      },
    ],
    or: {
      sid: 'ine1bc',
    },
  })
}

const model = incorrect()
"
`;

exports[`hmr babel effector code in incorrect uncalled fabric 1`] = `
"'use strict'

var _effector = require('effector')

function incorrect() {
  const $count = (0, _effector.createStore)(0, {
    sid: '-yjv6sh',
  })
  const increment = (0, _effector.createEvent)({
    sid: '9oa92i',
  })
  const decrement = (0, _effector.createEvent)({
    sid: '-l7dkur',
  })
  ;(0, _effector.sample)({
    and: [
      {
        clock: increment,
        source: $count,
        fn: count => count + 1,
        target: $count,
      },
    ],
    or: {
      sid: '-ar3hri',
    },
  })
  ;(0, _effector.sample)({
    and: [
      {
        clock: decrement,
        source: $count,
        fn: count => count - 1,
        target: $count,
      },
    ],
    or: {
      sid: 'ine1bc',
    },
  })
}
"
`;
