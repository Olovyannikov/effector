// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`hmr module cjs format 1`] = `
"'use strict'

Object.defineProperty(exports, '__esModule', {
  value: true,
})
exports.default = exports.exportedLet = exports.exportedConst = void 0

var _effector = require('effector')

var _factories = require('@withease/factories')

const _internalHMRRegion = (0, _effector.createNode)({
  regional: true,
})

function incorrect() {
  const $si = (0, _effector.createStore)(0, {
    sid: 's50ivo',
  })
  const ei = (0, _effector.createEvent)({
    sid: 'vcjkqm',
  })
  const iFx = (0, _effector.createEffect)(() => {}, {
    sid: '4szayb',
  })
  return {
    $si,
    ei,
    iFx,
  }
}

const incorrectArrow = () =>
  (0, _effector.createStore)(0, {
    sid: 'kf1ayc',
  })

const correct = (0, _effector.withRegion)(_internalHMRRegion, () =>
  (0, _effector.withFactory)({
    sid: '-ikkxki',
    fn: () =>
      (0, _factories.createFactory)(() => {
        const $si = (0, _effector.createStore)(0, {
          sid: '-ybsckh',
        })
        const ei = (0, _effector.createEvent)({
          sid: '-k2ug0b',
        })
        const iFx = (0, _effector.createEffect)(() => {}, {
          sid: '-4raw84',
        })
        return {
          $si,
          ei,
          iFx,
        }
      }),
  }),
)
const fx = (0, _effector.withRegion)(_internalHMRRegion, () =>
  (0, _effector.createEffect)(() => {}, {
    sid: 'jvh2by',
  }),
)
const attachedFx = (0, _effector.withRegion)(_internalHMRRegion, () =>
  (0, _effector.attach)({
    and: {
      effect: fx,
    },
    or: {
      sid: 'rpnd5t',
    },
  }),
)
const $count = (0, _effector.withRegion)(_internalHMRRegion, () =>
  (0, _effector.createStore)(0, {
    sid: 's9hq26',
  }),
)
const increment = (0, _effector.withRegion)(_internalHMRRegion, () =>
  (0, _effector.createEvent)({
    sid: 'mq1bc6',
  }),
)
const decrement = (0, _effector.withRegion)(_internalHMRRegion, () =>
  (0, _effector.createEvent)({
    sid: '-ue8y8v',
  }),
)
const exportedConst = (0, _effector.withRegion)(_internalHMRRegion, () =>
  (0, _effector.createStore)('', {
    sid: 'kijuqq',
  }),
)
exports.exportedConst = exportedConst
let exportedLet = (0, _effector.withRegion)(_internalHMRRegion, () =>
  (0, _effector.createStore)('', {
    sid: 'ajlqjc',
  }),
)
exports.exportedLet = exportedLet
const model = (0, _effector.withRegion)(_internalHMRRegion, () =>
  (0, _effector.withFactory)({
    sid: 'ueg7w5',
    fn: () => (0, _factories.invoke)(correct),
  }),
)
const incorrectModel = incorrect()
const incorrectArrowModel = incorrectArrow()
;(0, _effector.withRegion)(_internalHMRRegion, () =>
  $count.on(increment, count => count + 1),
)
;(0, _effector.withRegion)(_internalHMRRegion, () => $count.watch(console.log))
const $store = (0, _effector.withRegion)(_internalHMRRegion, () =>
  (0, _effector.sample)({
    and: [
      {
        clock: $count,
      },
    ],
    or: {
      sid: 'x4yuah',
    },
  }),
)

if (true) {
  ;(0, _effector.withRegion)(_internalHMRRegion, () =>
    (0, _effector.sample)({
      and: [
        {
          clock: increment,
          source: $count,
          fn: count => count + 1,
          target: $count,
        },
      ],
      or: {
        sid: 'n1dbhi',
      },
    }),
  )
}

;(0, _effector.withRegion)(_internalHMRRegion, () =>
  (0, _effector.sample)({
    and: [
      {
        clock: decrement,
        source: $count,
        fn: count => count - 1,
        target: $count,
      },
    ],
    or: {
      sid: 'nhbcn9',
    },
  }),
)
;(0, _effector.withRegion)(_internalHMRRegion, () =>
  (0, _effector.sample)({
    and: [
      {
        clock: decrement,
        target: increment.prepend(() => -1),
      },
    ],
    or: {
      sid: 'nl5wss',
    },
  }),
)

class Class {
  event = (0, _effector.createEvent)({
    sid: 'xp6hes',
  })
}

var _default = (0, _effector.createEvent)({
  sid: 'z4bcpo',
})

exports.default = _default

if (module.hot) {
  module.hot.dispose(() => (0, _effector.clearNode)(_internalHMRRegion))
} else {
  console.warn('[effector hmr] HMR is not available in current environment.')
}
"
`;

exports[`hmr module esm format 1`] = `
"import {
  createNode as _createNode,
  clearNode as _clearNode,
  withRegion as _withRegion,
  withFactory as _withFactory,
} from 'effector'

const _internalHMRRegion = _createNode({
  regional: true,
})

import {createEvent, createStore, sample, createEffect, attach} from 'effector'
import {createFactory, invoke} from '@withease/factories'

function incorrect() {
  const $si = createStore(0, {
    sid: 's50ivo',
  })
  const ei = createEvent({
    sid: 'vcjkqm',
  })
  const iFx = createEffect(() => {}, {
    sid: '4szayb',
  })
  return {
    $si,
    ei,
    iFx,
  }
}

const incorrectArrow = () =>
  createStore(0, {
    sid: 'kf1ayc',
  })

const correct = _withRegion(_internalHMRRegion, () =>
  _withFactory({
    sid: '-ikkxki',
    fn: () =>
      createFactory(() => {
        const $si = createStore(0, {
          sid: '-ybsckh',
        })
        const ei = createEvent({
          sid: '-k2ug0b',
        })
        const iFx = createEffect(() => {}, {
          sid: '-4raw84',
        })
        return {
          $si,
          ei,
          iFx,
        }
      }),
  }),
)

const fx = _withRegion(_internalHMRRegion, () =>
  createEffect(() => {}, {
    sid: 'jvh2by',
  }),
)

const attachedFx = _withRegion(_internalHMRRegion, () =>
  attach({
    and: {
      effect: fx,
    },
    or: {
      sid: 'rpnd5t',
    },
  }),
)

const $count = _withRegion(_internalHMRRegion, () =>
  createStore(0, {
    sid: 's9hq26',
  }),
)

const increment = _withRegion(_internalHMRRegion, () =>
  createEvent({
    sid: 'mq1bc6',
  }),
)

const decrement = _withRegion(_internalHMRRegion, () =>
  createEvent({
    sid: '-ue8y8v',
  }),
)

export const exportedConst = _withRegion(_internalHMRRegion, () =>
  createStore('', {
    sid: 'kijuqq',
  }),
)
export let exportedLet = _withRegion(_internalHMRRegion, () =>
  createStore('', {
    sid: 'ajlqjc',
  }),
)

const model = _withRegion(_internalHMRRegion, () =>
  _withFactory({
    sid: 'ueg7w5',
    fn: () => invoke(correct),
  }),
)

const incorrectModel = incorrect()
const incorrectArrowModel = incorrectArrow()

_withRegion(_internalHMRRegion, () => $count.on(increment, count => count + 1))

_withRegion(_internalHMRRegion, () => $count.watch(console.log))

const $store = _withRegion(_internalHMRRegion, () =>
  sample({
    and: [
      {
        clock: $count,
      },
    ],
    or: {
      sid: 'x4yuah',
    },
  }),
)

if (true) {
  _withRegion(_internalHMRRegion, () =>
    sample({
      and: [
        {
          clock: increment,
          source: $count,
          fn: count => count + 1,
          target: $count,
        },
      ],
      or: {
        sid: 'n1dbhi',
      },
    }),
  )
}

_withRegion(_internalHMRRegion, () =>
  sample({
    and: [
      {
        clock: decrement,
        source: $count,
        fn: count => count - 1,
        target: $count,
      },
    ],
    or: {
      sid: 'nhbcn9',
    },
  }),
)

_withRegion(_internalHMRRegion, () =>
  sample({
    and: [
      {
        clock: decrement,
        target: increment.prepend(() => -1),
      },
    ],
    or: {
      sid: 'nl5wss',
    },
  }),
)

class Class {
  event = createEvent({
    sid: 'xp6hes',
  })
}

export default createEvent({
  sid: 'z4bcpo',
})

if (import.meta.hot || import.meta.webpackHot) {
  ;(import.meta.hot || import.meta.webpackHot).dispose(() =>
    _clearNode(_internalHMRRegion),
  )
} else {
  console.warn('[effector hmr] HMR is not available in current environment.')
}
"
`;
